#include "TXLib.h"

struct CBall
    {
    double x, y;
    double vx, vy;
    double rad;
    COLORREF color;
    };

void Move_shariki ();
void Drow_Shar (CBall b);
void Dvig_Shar_Comp (CBall* b, double* dt);
void Drow_Text (double x, double y, const char* text);
void Ogranich_Igrok (CBall* b, double* dt);
void Upravlenie (CBall* b);
//void Igrok (double* x, double* y, double* vx, double* vy, double* dt, double rad);
double Dist (double x1, double y1, double x2, double y2);
void Drow_Score (double x, double y, double score);
void Razmer (CBall * b);
void stolknov_comp (CBall* b, CBall* b2);

int main ()
    {
    txCreateWindow (1500, 800);
    Move_shariki ();
    }

void Move_shariki ()
    {
    CBall b_C1 = {random (20, 1480), random (20, 780), 4, 3, 40, TX_RED};

    CBall b_C2 = {random (20, 1480), random (20, 780), -3, -4, 40, TX_RED};

    CBall b_C3 = {random (20, 1480), random (20, 780), -3, 4, 40, TX_RED};

    CBall b_C4 = {random (20, 1480), random (20, 780), 3, -4, 40, TX_RED};

    CBall b_igr = {300, 400, 3, 3, 20, TX_LIGHTGREEN};

    double dt = 1;

    HDC fon = txLoadImage ("D:\\cosmos-119.bmp");
    HDC igrok = txLoadImage ("D:\\igrok.bmp");

    while (!GetAsyncKeyState(VK_ESCAPE))
        {
        if (!GetAsyncKeyState (VK_SPACE))
            {
            txClear ();
            }

        txBitBlt (txDC(), 0, 0, 1500, 800, fon, 0, 0);

        Drow_Score (750, 20, dt);

        Drow_Shar (b_C1);
        Dvig_Shar_Comp (&b_C1, &dt);

        Drow_Shar (b_C2);
        Dvig_Shar_Comp (&b_C2, &dt);

        Drow_Shar (b_C3);
        Dvig_Shar_Comp (&b_C3, &dt);

        Drow_Shar (b_C4);
        Dvig_Shar_Comp (&b_C4, &dt);

 //       Igrok (&x_igr, &y_igr, &vx_igr, &vy_igr, &dt, rad);

        if (Dist (b_C1.x, b_C1.y, b_igr.x, b_igr.y) <= b_C1.rad + b_igr.rad)
            {
            Drow_Text (200, 200, "Game Over!");
            break;
            }
        if (Dist (b_C2.x, b_C2.y, b_igr.x, b_igr.y) <= b_C2.rad + b_igr.rad)
            {
            Drow_Text (200, 200, "Game Over!");
            break;
            }
        if (Dist (b_C3.x, b_C3.y, b_igr.x, b_igr.y) <= b_C3.rad + b_igr.rad)
            {
            Drow_Text (200, 200, "Game Over!");
            break;
            }
        if (Dist (b_C4.x, b_C4.y, b_igr.x, b_igr.y) <= b_C4.rad + b_igr.rad)
            {
            Drow_Text (200, 200, "Game Over!");
            break;
            }

        stolknov_comp (&b_C1, &b_C2);
        stolknov_comp (&b_C1, &b_C3);
        stolknov_comp (&b_C1, &b_C4);
        stolknov_comp (&b_C2, &b_C3);
        stolknov_comp (&b_C2, &b_C4);
        stolknov_comp (&b_C3, &b_C4);

        Razmer (&b_igr);

        if (b_igr.x + b_igr.rad > 1500 || b_igr.x - b_igr.rad < 0 || b_igr.y + b_igr.rad > 800 || b_igr.y - b_igr.rad < 0)
            {
            Drow_Text (200, 200, "Game Over!");
            b_igr.vx = 0;
            b_igr.vy = 0;
            }
        else
            {
            Drow_Shar (b_igr);
            Upravlenie (&b_igr);
            Ogranich_Igrok (&b_igr, &dt);
            }

        txTransparentBlt (txDC(), b_igr.x - b_igr.rad, b_igr.y - b_igr.rad, 100, 100, igrok, 0, 0);

        txSetFillColor (TX_BLACK);
        txSleep (5);
        }

    txDeleteDC (fon);
    txDeleteDC (igrok);
    }

void Drow_Shar (CBall b)
    {
    txSetFillColor (b.color);
    txCircle (b.x, b.y, b.rad);
    }

void Dvig_Shar_Comp (CBall* b, double* dt)
    {
    b->x += b->vx * *dt;
    b->y += b->vy * *dt;
    *dt += 0.001;

    if (b->x + b->rad > 1500)
        {
        b->x = 1500 - b->rad;
        b->vx = -b->vx;
        }
    if (b->x - b->rad < 0)
        {
        b->x = 0 + b->rad;
        b->vx = -b->vx;
        }
    if (b->y + b->rad > 800)
        {
        b->y = 800 - b->rad;
        b->vy = -b->vy;
        }
    if (b->y - b->rad < 0)
        {
        b->y = 0 + b->rad;
        b->vy = -b->vy;
        }
    }

void Ogranich_Igrok (CBall* b, double* dt)
    {
    b->x += b->vx * *dt;
    b->y += b->vy * *dt;
    *dt = *dt + 0.001;

    if (b->x + b->rad > 1500)
        {
        Drow_Text (200, 200, "Game Over!");
        b->vx = 0;
        b->vy = 0;
        }
    if (b->x - b->rad < 0)
        {
        Drow_Text (200, 200, "Game Over!");
        b->vx = 0;
        b->vy = 0;
        }
    if (b->y + b->rad > 800)
        {
        Drow_Text (200, 200, "Game Over!");
        b->vy = 0;
        b->vx = 0;
        }
    if (b->y - b->rad < 0)
        {
        Drow_Text (200, 200, "Game Over!");
        b->vy = 0;
        b->vx = 0;
        }
    }

void Drow_Text (double x, double y, const char* text)
    {
    txSelectFont ("Arial", 200, 100, 10, false, false, false, 0);
    txTextOut (x, y, text);
    }

void Drow_Score (double x, double y, double score)
    {
    txRectangle (x - 100, y - 20, x + 100, y + 20);
    char text [100] = "";
    sprintf (text, "You have %lg", score);
    txTextOut (x - 100, y, text);
    }

void Upravlenie (CBall* b)
    {
    if (!GetAsyncKeyState ('D' && 'A' && 'S' && 'W'))
        {
        b->vx = 0;
        b->vy = 0;
        }
    if (GetAsyncKeyState ('D'))
        {
        b->vx = 3;
        }
    if (GetAsyncKeyState ('A'))
        {
        b->vx = -3;
        }
    if (GetAsyncKeyState ('S'))
        {
        b->vy = 3;
        }
    if (GetAsyncKeyState ('W'))
        {
        b->vy = -3;
        }
    }

/*void Igrok (double* x, double* y, double* vx, double* vy, double* dt, double rad)
    {
    if (*x + rad > 1500 || *x - rad < 0 || *y + rad > 800 || *y - rad < 0)
        {
        Drow_Text (200, 200, "Game Over!");
        *vx = 0;
        *vy = 0;
        }
    else
        {
        Drow_Shar (*x, *y, rad, TX_LIGHTGREEN);
        Upravlenie (*&vx, *&vy);
        Ogranich_Igrok (*&x, *&y, *&vx, *&vy, *&dt, rad);
        }
    }*/

double Dist (double x1, double y1, double x2, double y2)
    {
    return sqrt ((x2- x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
    }

void Razmer(CBall* b)
    {
    if (GetAsyncKeyState ('O'))
        {
        b->rad = b->rad + 0.5;
        }
    if (GetAsyncKeyState ('P'))
        {
        b->rad = b->rad - 0.5;
        }
    if (b->rad < 15)
        {
        b->rad = 15;
        }
    }

void stolknov_comp (CBall* b, CBall* b2)
    {
    if (Dist (b->x, b->y, b2->x, b2->y) <= b->rad + b2->rad)
        {
        b->vx = -b->vx;
        b->vy = -b->vy;
        b2->vx = -b2->vx;
        b2->vy = -b2->vy;//
        }
    }
